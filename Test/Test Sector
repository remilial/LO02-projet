import model.board.Sector;
import model.board.Ship;
import model.board.SystemType;
import model.board.Board;

public class Main {
    public static void main(String[] args) {
        try {
            testSectorInitialization();
            testAddShipToSector();
            testSectorCapacityEnforcement();
            testSectorNeighbors();
            System.out.println("All Sector tests passed successfully.");
        } catch (AssertionError e) {
            System.err.println("Test failed: " + e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // 1. Test Sector Initialization
    public static void testSectorInitialization() {
        System.out.println("Testing Sector Initialization...");

        Sector sector = new Sector(1, 1);
        assert sector.getX() == 1 : "Sector X coordinate is incorrect.";
        assert sector.getY() == 1 : "Sector Y coordinate is incorrect.";
        assert sector.getShips().isEmpty() : "Sector should start with no ships.";

        sector.setSystemType(SystemType.LEVEL1);
        assert sector.getSystemType() == SystemType.LEVEL1 : "Failed to set sector system type.";

        System.out.println("Sector initialization test passed.\n");
    }

    // 2. Test Adding Ships to Sector
    public static void testAddShipToSector() {
        System.out.println("Testing Ship Addition...");

        Sector sector = new Sector(2, 2);
        sector.setSystemType(SystemType.LEVEL2);  // Capacity for 2 ships

        Ship ship1 = new Ship("S1", "Blue", null);
        Ship ship2 = new Ship("S2", "Red", null);

        sector.addShip(ship1);
        assert sector.getShips().size() == 1 : "Failed to add first ship.";

        sector.addShip(ship2);
        assert sector.getShips().size() == 2 : "Failed to add second ship.";

        sector.removeShip(ship1);
        assert sector.getShips().size() == 1 : "Failed to remove ship.";

        System.out.println("Ship addition and removal test passed.\n");
    }

    // 3. Test Capacity Enforcement
    public static void testSectorCapacityEnforcement() {
        System.out.println("Testing Sector Capacity Enforcement...");

        Sector sector = new Sector(3, 3);
        sector.setSystemType(SystemType.LEVEL1);  // Capacity for 1 ship

        Ship ship1 = new Ship("S1", "Blue", null);
        Ship ship2 = new Ship("S2", "Red", null);

        sector.addShip(ship1);  // Should succeed
        try {
            sector.addShip(ship2);  // Should fail
            assert false : "Sector capacity exceeded but no exception thrown.";
        } catch (IllegalStateException e) {
            System.out.println("Sector correctly rejected ship due to capacity.");
        }

        System.out.println("Capacity enforcement test passed.\n");
    }

    // 4. Test Sector Neighbor Retrieval
    public static void testSectorNeighbors() {
        System.out.println("Testing Sector Neighbors...");

        Board board = Board.getInstance();
        board.resetBoard();

        Sector sector = board.getSector(1, 1);
        assert sector != null : "Failed to retrieve sector.";

        // Simulate neighbors on board
        board.getSector(0, 1).setSystemType(SystemType.LEVEL1);
        board.getSector(1, 0).setSystemType(SystemType.LEVEL1);
        board.getSector(1, 2).setSystemType(SystemType.LEVEL1);
        board.getSector(2, 1).setSystemType(SystemType.LEVEL1);

        assert sector.getNeighbors().size() == 4 : "Incorrect number of neighbors.";

        System.out.println("Sector neighbor retrieval test passed.\n");
    }
}
