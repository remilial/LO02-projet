import model.board.Hex;
import model.board.Sector;
import model.board.Ship;
import model.player.RealPlayer;
import model.board.SystemType;

public class Main {
    public static void main(String[] args) {
        try {
            testRealPlayerInitialization();
            testShipManagement();
            testShipMovementToHex();
            testSectorAssignment();
            System.out.println("All RealPlayer tests passed successfully.");
        } catch (AssertionError e) {
            System.err.println("Test failed: " + e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // 1. Test RealPlayer Initialization
    public static void testRealPlayerInitialization() {
        System.out.println("Testing RealPlayer Initialization...");

        RealPlayer player = new RealPlayer("Player1");

        assert player.getName().equals("Player1") : "Player name initialization failed.";
        assert player.getShipList().isEmpty() : "Initial ship list should be empty.";
        assert player.getCurrentSector() == null : "Current sector should be null at initialization.";

        System.out.println("RealPlayer initialization test passed.\n");
    }

    // 2. Test Adding and Removing Ships
    public static void testShipManagement() {
        System.out.println("Testing Ship Management...");

        RealPlayer player = new RealPlayer("Player2");
        Ship ship1 = new Ship("S1", "Blue", player);
        Ship ship2 = new Ship("S2", "Red", player);

        player.addShip(ship1);
        player.addShip(ship2);

        assert player.getShipList().contains(ship1) : "Failed to add first ship.";
        assert player.getShipList().contains(ship2) : "Failed to add second ship.";
        assert player.getShipList().size() == 2 : "Ship list size mismatch after adding ships.";

        player.removeShip(ship1);
        assert !player.getShipList().contains(ship1) : "Failed to remove ship.";
        assert player.getShipList().size() == 1 : "Ship list size mismatch after removal.";

        System.out.println("Ship management test passed.\n");
    }

    // 3. Test Ship Movement to Hex
    public static void testShipMovementToHex() {
        System.out.println("Testing Ship Movement to Hex...");

        RealPlayer player = new RealPlayer("Player3");
        Ship ship = new Ship("S3", "Green", player);
        Hex hexA = new Hex(0, SystemType.NONE);
        Hex hexB = new Hex(1, SystemType.NONE);

        player.addShip(ship);
        player.moveShipToHex(ship, hexA);

        assert ship.getCurrentHex() == hexA : "Failed to move ship to hex A.";
        assert hexA.getSystemType() == SystemType.LEVEL1 : "Hex A not marked as occupied.";

        player.moveShipToHex(ship, hexB);

        assert ship.getCurrentHex() == hexB : "Failed to move ship to hex B.";
        assert hexB.getSystemType() == SystemType.LEVEL1 : "Hex B not marked as occupied.";
        assert hexA.getSystemType() == SystemType.NONE : "Previous hex not cleared.";

        System.out.println("Ship movement to hex test passed.\n");
    }

    // 4. Test Sector Assignment and Movement
    public static void testSectorAssignment() {
        System.out.println("Testing Sector Assignment...");

        RealPlayer player = new RealPlayer("Player4");
        Sector sectorA = new Sector(0, 0);
        Sector sectorB = new Sector(1, 0);
        Ship ship = new Ship("S4", "Yellow", player);

        player.setCurrentSector(sectorA);
        sectorA.addShip(ship);

        assert player.getCurrentSector() == sectorA : "Failed to assign player to sector A.";
        assert sectorA.getShips().contains(ship) : "Failed to add ship to sector A.";

        player.moveShipToSector(ship, sectorB);
        assert ship.getCurrentSector() == sectorB : "Failed to move ship to sector B.";
        assert sectorB.getShips().contains(ship) : "Ship not present in sector B.";
        assert !sectorA.getShips().contains(ship) : "Ship still in sector A after move.";

        System.out.println("Sector assignment test passed.\n");
    }
}
