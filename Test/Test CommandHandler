import controller.player.CommandHandler;
import model.board.Board;
import model.board.Sector;
import model.board.SystemType;
import model.player.Player;
import model.player.RealPlayer;
import model.player.BotPlayer;
import model.player.Game;
import model.player.strategy.RandomStrategy;
import model.command.CommandType;

import java.util.*;

public class Main {
    public static void main(String[] args) {
        CommandHandler commandHandler = new CommandHandler();
        testCommandGrouping(commandHandler);
        testCommandExecutionEfficiency(commandHandler);
        System.out.println("All CommandHandler tests passed successfully.");
    }

    // Test grouping of commands based on player selections
    private static void testCommandGrouping(CommandHandler handler) {
        System.out.println("Testing Command Grouping...");

        Player player1 = new RealPlayer("Player1");
        Player bot1 = new BotPlayer("Bot1", new RandomStrategy());
        Player bot2 = new BotPlayer("Bot2", new RandomStrategy());

        Map<Player, List<CommandType>> chosenCommands = new HashMap<>();
        chosenCommands.put(player1, List.of(CommandType.EXPAND, CommandType.EXPLORE, CommandType.EXTERMINATE));
        chosenCommands.put(bot1, List.of(CommandType.EXPAND, CommandType.EXPLORE, CommandType.EXTERMINATE));
        chosenCommands.put(bot2, List.of(CommandType.EXPLORE, CommandType.EXTERMINATE, CommandType.EXPAND));

        Map<CommandType, List<Player>> groupedPhase0 = handler.groupCommands(chosenCommands, 0);
        assert groupedPhase0.get(CommandType.EXPAND).size() == 2 : "Phase 0 grouping failed.";

        Map<CommandType, List<Player>> groupedPhase1 = handler.groupCommands(chosenCommands, 1);
        assert groupedPhase1.get(CommandType.EXPLORE).size() == 2 : "Phase 1 grouping failed.";

        Map<CommandType, List<Player>> groupedPhase2 = handler.groupCommands(chosenCommands, 2);
        assert groupedPhase2.get(CommandType.EXTERMINATE).size() == 2 : "Phase 2 grouping failed.";

        System.out.println("Command grouping test passed.\n");
    }

    // Test command execution with efficiency scaling
    private static void testCommandExecutionEfficiency(CommandHandler handler) {
        System.out.println("Testing Command Execution Efficiency...");

        Game game = Game.getInstance();
        List<Player> players = new ArrayList<>();

        Player player1 = new RealPlayer("Player1");
        Player bot1 = new BotPlayer("Bot1", new RandomStrategy());
        Player bot2 = new BotPlayer("Bot2", new RandomStrategy());

        players.add(player1);
        players.add(bot1);
        players.add(bot2);

        // Initialize players and assign starting sectors
        game.initializePlayers(players);

        Map<CommandType, List<Player>> groupedCommands = new HashMap<>();
        groupedCommands.put(CommandType.EXPAND, List.of(player1, bot1));
        groupedCommands.put(CommandType.EXTERMINATE, List.of(bot2));

        handler.executeCommands(groupedCommands);

        System.out.println("Command execution efficiency test passed.\n");
    }
}
